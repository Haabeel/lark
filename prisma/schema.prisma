// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [vector]
}

model User {
  id             String     @id
  name           String
  email          String
  firstName      String
  lastName       String?
  emailVerified  Boolean
  image          String?
  createdAt      DateTime
  updatedAt      DateTime
  sessions       Session[]
  accounts       Account[]
  projects       Project[]  @relation("CreatedProjects")
  memberships    Member[]
  questionsAsked Question[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Project {
  id              String    @id @default(cuid())
  name            String
  description     String?
  backgroundColor String
  creatorId       String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  githubUrl       String
  deletedAt       DateTime?
  creator         User      @relation(fields: [creatorId], references: [id], name: "CreatedProjects", onDelete: Cascade)

  members             Member[]
  Commit              Commit[]
  SourceCodeEmbedding SourceCodeEmbedding[]
  tasks               Task[]

  savedQuestions Question[]
  KanbanColumn   KanbanColumn[]
}

model Member {
  id           String      @id @default(cuid())
  userId       String
  projectId    String
  role         ProjectRole @default(CONTRIBUTOR)
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  project      Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks        Task[]      @relation("AssignedTasks")
  tasksCreated Task[]      @relation("CreatedTasks")

  @@unique([userId, projectId])
  @@map("member")
}

enum ProjectRole {
  MAINTAINER
  CONTRIBUTOR
}

model Commit {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  commitMessage      String
  commitHash         String
  commitAuthorName   String
  commitAuthorAvatar String
  commitDate         DateTime

  summary String
}

model SourceCodeEmbedding {
  id String @id @default(cuid())

  summaryEmbedding Unsupported("vector(768)")?
  sourceCode       String
  fileName         String
  summary          String

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Question {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  question String
  answer   String

  filesReference Json?

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Task {
  id          String       @id @default(cuid())
  title       String
  description String?
  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  order       Int

  startDate DateTime @db.Timestamp(6)
  endDate   DateTime @db.Timestamp(6)

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  assigneeId String?
  assignee   Member? @relation("AssignedTasks", fields: [assigneeId], references: [id], onDelete: Cascade)

  createdById String
  createdBy   Member @relation("CreatedTasks", fields: [createdById], references: [id], onDelete: Cascade)

  columnId String?
  column   KanbanColumn? @relation(fields: [columnId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("task")
}

model KanbanColumn {
  id    String @id @default(cuid())
  name  String
  order Int

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  tasks Task[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("kanban_column")
}

enum TaskStatus {
  BACKLOG
  TODO
  IN_PROGRESS
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}
