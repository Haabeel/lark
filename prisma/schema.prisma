generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  directUrl  = env("DIRECT_URL")
  extensions = [uuid_ossp(map: "uuid-ossp", schema: "extensions"), vector]
}

model User {
  id                       String          @id
  name                     String
  email                    String          @unique
  firstName                String
  lastName                 String?
  emailVerified            Boolean
  image                    String?
  createdAt                DateTime
  updatedAt                DateTime
  projects                 Project[]       @relation("CreatedProjects")
  questionsAsked           Question[]
  accounts                 Account[]
  memberships              Member[]
  sessions                 Session[]
  createdChannels          Channel[]
  messagesSent             Message[]
  directChannelMemberships ChannelMember[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Project {
  id                  String                @id @default(cuid())
  name                String
  description         String?
  creatorId           String
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  githubUrl           String
  deletedAt           DateTime?
  backgroundColor     String
  Commit              Commit[]
  creator             User                  @relation("CreatedProjects", fields: [creatorId], references: [id], onDelete: Cascade)
  savedQuestions      Question[]
  SourceCodeEmbedding SourceCodeEmbedding[]
  KanbanColumn        KanbanColumn[]
  members             Member[]
  tasks               Task[]

  channels Channel[]
}

model Member {
  id           String          @id @default(cuid())
  userId       String
  projectId    String
  role         ProjectRole     @default(CONTRIBUTOR)
  project      Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  tasks        Task[]          @relation("AssignedTasks")
  tasksCreated Task[]          @relation("CreatedTasks")
  channels     ChannelMember[]

  @@unique([userId, projectId])
  @@map("member")
}

model Commit {
  id                 String   @id @default(cuid())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  projectId          String
  commitMessage      String
  commitHash         String
  commitAuthorName   String
  commitAuthorAvatar String
  commitDate         DateTime
  summary            String
  project            Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model SourceCodeEmbedding {
  id               String                 @id @default(cuid())
  summaryEmbedding Unsupported("vector")?
  sourceCode       String
  fileName         String
  summary          String
  projectId        String
  project          Project                @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt        DateTime?              @default(now())
  updatedAt        DateTime?              @updatedAt
}

model Question {
  id             String   @id @default(cuid())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  question       String
  answer         String
  filesReference Json?
  projectId      String
  userId         String
  project        Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Task {
  id          String        @id @default(cuid())
  title       String
  description String?
  status      TaskStatus    @default(TODO)
  priority    TaskPriority  @default(MEDIUM)
  order       Int
  startDate   DateTime      @db.Timestamp(6)
  endDate     DateTime      @db.Timestamp(6)
  projectId   String
  assigneeId  String?
  createdById String
  columnId    String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  assignee    Member?       @relation("AssignedTasks", fields: [assigneeId], references: [id], onDelete: Cascade)
  column      KanbanColumn? @relation(fields: [columnId], references: [id], onDelete: Cascade)
  createdBy   Member        @relation("CreatedTasks", fields: [createdById], references: [id], onDelete: Cascade)
  project     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("task")
}

model KanbanColumn {
  id        String   @id @default(cuid())
  name      String
  order     Int
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tasks     Task[]

  @@map("kanban_column")
}

enum ProjectRole {
  MAINTAINER
  CONTRIBUTOR
}

enum TaskStatus {
  BACKLOG
  TODO
  IN_PROGRESS
  DONE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

model Channel {
  id        String   @id @default(cuid())
  name      String? // e.g. "general"; null for DMs
  isDm      Boolean  @default(false)
  creatorId String
  projectId String? // null for DMs
  createdAt DateTime @default(now())

  creator  User            @relation(fields: [creatorId], references: [id])
  project  Project?        @relation(fields: [projectId], references: [id], onDelete: Cascade)
  members  ChannelMember[]
  messages Message[]

  @@map("channel")
}

model ChannelMember {
  id        String   @id @default(cuid())
  channelId String
  memberId  String? // links to Member
  userId    String? // links to User (for DMs)
  joinedAt  DateTime @default(now())

  channel Channel   @relation(fields: [channelId], references: [id], onDelete: Cascade)
  member  Member?   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  user    User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Message Message[]

  @@unique([channelId, memberId])
  @@unique([channelId, userId])
  @@map("channel_member")
}

model Message {
  id        String   @id @default(cuid())
  channelId String
  senderId  String // link to User (for DMs)
  memberId  String? // nullable for system or non-project DMs
  content   String
  createdAt DateTime @default(now())

  channel     Channel        @relation(fields: [channelId], references: [id], onDelete: Cascade)
  sender      User           @relation(fields: [senderId], references: [id], onDelete: Cascade)
  member      ChannelMember? @relation(fields: [memberId], references: [id], onDelete: SetNull)
  attachments Attachment[]

  @@index([channelId, createdAt])
  @@map("message")
}

model Attachment {
  id        String         @id @default(cuid())
  messageId String
  type      AttachmentType
  url       String
  fileName  String?
  fileSize  Int?
  createdAt DateTime       @default(now())

  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("attachment")
}

enum AttachmentType {
  IMAGE
  VIDEO
  FILE
}

model Progress {
  id        String   @id @default(cuid())
  projectId String
  step      String
  progress  Int
  createdAt DateTime @default(now())
}
